// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  about                 String?
  cityId                String? // Foreign key for City
  categoryId            String? // Foreign key for Category
  cities                City?                  @relation(fields: [cityId], references: [id])
  categories            Category?              @relation(fields: [categoryId], references: [id])
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  Product               Product[]
  Urls                  Urls?
  emailUpdateToken EmailUpdateVerificationToken?

}

model City {
  id     String  @id @default(cuid())
  name   String
  users  User[] // This indicates a City can have multiple Users
  orders Order[]
}

model Category {
  id    String @id @default(cuid())
  name  String
  users User[] // This indicates a Category can have multiple Users
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Product {
  id     String  @id @default(cuid())
  name   String
  image  String?
  price  String
  detail String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  orders Order[]
  workingHours WorkingHours?
}

model Order {
  id            String     @id @default(cuid())
  name          String
  email         String
  emailVerified DateTime?
  phone         String
  submission    DateTime
  date          String
  time          String
  location      String
  city          City       @relation(fields: [cityId], references: [id])
  cityId        String
  product       Product    @relation(fields: [productId], references: [id] ,  onDelete: Cascade)
  productId     String
  isSubmitted   DateTime?
  isAccepted    Acceptance @default(PENDING)
  isPaid        DateTime?
  paymentId     String?
}

model Urls {
  id     String @id @default(cuid())
  link   String @unique
  user   User   @relation(fields: [userId], references: [id],  onDelete: Cascade)
  userId String @unique
}

model OrderVerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
}

enum Acceptance {
  ACCEPTED
  REJECTED
  PENDING
}

model EmailUpdateVerificationToken {
  id      String   @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id],  onDelete: Cascade)
  userId String @unique
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model WorkingHours {
  id      String   @id @default(cuid())
  initialOpeningHour String
  initialOpeningMinutes String
  initialClosingHour String
  initialClosingMinutes String
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String @unique
}